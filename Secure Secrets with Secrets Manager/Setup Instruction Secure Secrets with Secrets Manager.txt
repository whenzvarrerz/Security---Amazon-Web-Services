A. Access and Explore the repository
	1. Open browser and head to this GitHub repository.
		- https://github.com/NatNextWork1/nextwork-security-secretsmanager
	2. In the file, select app.py.
		- contains all the code that connects AWS account and lists the names of your S3 Bucket.
		
	3. View config.py
		- Contains AWS credentials for our web app.
		- If shared in GitHub publicly, it's a security risk. 
		- To make this web app more secure, let's make a copy of it in our local computer. 
		
B. Experiment with our own copy on how config.py stores credentials.
	1. Use terminal to get a copy on the repository.
		- git clone [HTTPS-URL]
		
	2. Check if you downloaded it in the correct folder.
	3. Open config.py in text editor and replace the placeholder values in it. These are just test credentials. Save changes. 	
		- AWS_ACCESS_KEY_ID = "AKIAW3MEFRAFTQM5FHKE"
		  AWS_SECRET_ACCESS_KEY = "F0b8s5m+pOZsttvBCirr1BOutuvCpqXMW2Y1qAxY"
		  AWS_REGION = "your region"
	
C. Creating Virtual Environment. 
	1. Create a new virtual environment
		- python3 -m venv venv
	2. If you run an error, check if you have Python and pip installed.
		- python3 --version
		- pip3 --version
	3. Again, create a new virtual environment. See what works with:
		- python3 -m venv venv
		- python -m venv venv
	4. Activate virtual environment.
		- .\venv\Scripts\activate

D. Run the web app.
	1. You will get an error: No module named 'boto3'
		- python3. app.py
		- boto3 - AWS SDK for Python - list S3 buckets
	2. Install boto3, fastapi, uvicorn, and all the required packages in requirements.txt.
		- pip3 install -r requirments.txt
	3. Verify installed packages.
		- pip3 list		- 	
		- You will see Uvicorn running on http://0.0.0.0:8000
	4. Access the web app in your browser. 
		- http://0.0.0.0:8000
		- View My S3 Buckets
	5. You will get an error!
		- InvalidAccessKeyId
		- credentials in config.py are only test credentials we saved.
	
E. Setting up AWS Credentials.
	1. Log into AWS Console Management as your IAM Admin user.
	2. Make sure you use the region where your S3 bucket is. Create a new bucket if you still don't have one. 
		- Object Ownership - leave ACL disabled.
		- Block Public Access settings - Check Block all public access.
		- Leave default versioning and encryption settings.
	
	3. Set up web credentials to access your S3 bucket.
		- Search IAM in AWS Management Console.
		- Select Users > Your IAM Administrator permissions.
		- Users > select Security credentials tab.
		- Create access key > Local code > Description tag value.
		- Your access key is created with Secret access key!
		- Download .csv file.
	
	4. Stop running the web app on the terminal.
			- Control + C
			- Uvicorn server shutdown terminal.
		
	5. Open the config.py again. Update the credentials.
		- Change the Access key.
		- Change the Secret access key.
		- Region - should be your region.
		- Save.
 
	6. Return to your virtual terminal.

F. Verify if your web app can list your S3 buckets.
			- nano config.py
			- nano python3 app.py
			- Uvicorn server is started. 
	1. Return to your browser tab and refresh. 
		- You will see a JSON response listing your buckets.

G. Making your code Public in GitHub.
	1. Fork the repository page. Get your own copy of the web app code.
		- https://github.com/NatNextWork1/nextwork-security-secretsmanager/blob/main/app.py
	2. Push your code to GitHub.
		- Stop your running web app in the terminal.
			- Control + C
	3. Initialize Git in your local project directory.
			- git init
	4. Connect your local repository to your forked repository on GitHub.
			- git remote add origin <your-forked-repo-url>
	5. Change the existing remote "origin" to the new forked repository.
			- git remote set-url origin <your-forked-repo-url>
	6. Verify if the remote "origin" was correctly set up.
			- git remote -v
			- with fetch and push if correct
	7. Stage all changes you've made in your local project.
			- git add .
	8. Save snapshots of your changes
			- git commit - m "Updated config.py with hardcoded credentials"
	9. Push your local commits to your forked repository on GitHub. 
			- git push -u origin main

H. GitHub's Secret Scanning Block.
	"Push cannot contain secrets"
		- This is where AWS Secrets Manager comes in.

I. Create a new secret in Secrets Manager to store your AWS Credentials.
	1. On the AWS Management Console, search Secrets Manager.
	2. Select Store a new secret.
	3. Choose secret type > Other type of secret
		Key field - AWS_ACCESS_KEY_ID
		Add row
		Key field - AWS_SECRET_ACCESS_KEY	
		Copy the values on your config.py file
		Encryption key > Key/value pairs
		Configure secret name and description
		Configure rotation > Optional
		Secret replication > Disabled
		Automatic rotation > Disabled
		- Green banner shows Successfully stored the secret.
	
J. Update config.py unsecure to secure code. Use sample code from Secrets Manager to fetch them securely.
	1. Select See sample code.
		Sample code, click Python 3 tab.
	2. Select and copy the code from line 6 (import statement) down to the end of the code block.
	3. Update the config.py file to use Secrets Manager instead of hardcoded credentials.
		Delete existing config.py file
			- del config.py
		Create a new config.py file
			- type nul > config.py
		Open the new file in notepad
			- notepad config.py
			- paste the Python code from the Secrets Manager
			- add get_secret()

============================================================================================================
   
# Retrieve credentials from Secrets Manager
credentials = get_secret()

# Extract the values; if AWS_REGION isn't in the secret, use the region from the session
AWS_ACCESS_KEY_ID = credentials.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = credentials.get("AWS_SECRET_ACCESS_KEY")
AWS_REGION = credentials.get("AWS_REGION", boto3.session.Session().region_name or "us-east-2")
============================================================================================================
		
		Import new JSON package
			- import json	

K. Push Changes.
	1. Return to terminal.
			- git commit -m "Updated config.py with Secrets Manager credentials"
			- git push -u origin main - still with error!
			- config.py is still not enough for security best practices.	
			- hard-coded credentials still live in commit history			- rewrite the history to completely remove the commit that had the hard-coded credentials.
	
	2. Remove hard-coded credentials from Commit History.
		- Identify the commit ID, take note of the first seven digits.
		- Run the command
			- git rebase -i root
		- A rebase editor will open. 
			- Search for the AWS credentials - seven-digit ID
		- Remove commit in the rebase.
			- pick replace with d
		- Save.

	3. Resolve merge conflicts if there are any. Save.
		- Resolve by choosing which version to keep and remove markers.
		- Delete:
			entire section <<<<< HEAD ==== for hard-coded credentials.	
			===== end of file line
			>>>>> feature-branch
	4. Stage and commit changes.
			- git add config.py
			- git commit -m "Resolved merge conflicts"
	
	5. Continue the rebase.
			- git rebase --continue

	6. Push the changers to GitHub.
			- bash git push
	
	7. Verify the GitHub repository.
		- Head to your forked repository.
		- Check the code in config.py
			- config.py is clean of any hard-coded credentials.
			- show only code to retrieve credentials from AWS Secrets Manager.
	
	8. Check commit history on config.py
		- show there is no commit in your hard-coded credentials.

============================================================================================================
Code is secure, sensitive data is removed from commit history. No exposed credentials. Now you can collaborate and share your code. 
============================================================================================================
	
	

		
				



			



		

		


