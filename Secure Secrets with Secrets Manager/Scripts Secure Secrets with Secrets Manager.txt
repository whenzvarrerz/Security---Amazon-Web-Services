A. Access and Explore the repository
	1. Open browser and head to this GitHub repository.
		- https://github.com/NatNextWork1/nextwork-security-secretsmanager
	2. In the file, select app.py.
		- contains all the code that connects AWS account and lists the names of your S3 Bucket.
		
	3. View config.py
		- Contains AWS credentials for our web app.
		- If shared in GitHub publicly, it's a security risk. 
		- To make this web app more secure, let's make a copy of it in our local computer. 
		

	1. Use terminal to get a copy on the repository.
		- git clone [HTTPS-URL]
		
	
C. Creating Virtual Environment. 
	1. Create a new virtual environment
		- python3 -m venv venv
	2. If you run an error, check if you have Python and pip installed.
		- python3 --version
		- pip3 --version
	3. Again, create a new virtual environment. See what works with:
		- python3 -m venv venv
		- python -m venv venv
	4. Activate virtual environment.
		- .\venv\Scripts\activate

D. Run the web app.
	2. Install boto3, fastapi, uvicorn, and all the required packages in requirements.txt.
		- pip3 install -r requirments.txt
	3. Verify installed packages.
		- pip3 list		- 	
		- You will see Uvicorn running on http://0.0.0.0:8000
	4. Access the web app in your browser. 
		- http://0.0.0.0:8000
		- View My S3 Buckets
		
E. Setting up AWS Credentials.
	4. Stop running the web app on the terminal.
			- Control + C
			- Uvicorn server shutdown terminal.

F. Verify if your web app can list your S3 buckets.
			- nano config.py
			- nano python3 app.py
		- Uvicorn server is started. 
	
G. Making your code Public in GitHub.
	1. Fork the repository page. Get your own copy of the web app code.
		- https://github.com/NatNextWork1/nextwork-security-secretsmanager/blob/main/app.py
	
		- Stop your running web app in the terminal.
		- Control + C
	
	3. Initialize Git in your local project directory.
			- git init
	4. Connect your local repository to your forked repository on GitHub.
			- git remote add origin <your-forked-repo-url>
	5. Change the existing remote "origin" to the new forked repository.
			- git remote set-url origin <your-forked-repo-url>
	6. Verify if the remote "origin" was correctly set up.
			- git remote -v
			- with fetch and push if correct
	7. Stage all changes you've made in your local project.
			- git add .
	8. Save snapshots of your changes
			- git commit - m "Updated config.py with hardcoded credentials"
	9. Push your local commits to your forked repository on GitHub. 
			- git push -u origin main

H. Update config.py unsecure to secure code. Use sample code from Secrets Manager to fetch them securely.
	1. Select See sample code.
		Sample code, click Python 3 tab.
	2. Select and copy the code from line 6 (import statement) down to the end of the code block.
	3. Update the config.py file to use Secrets Manager instead of hardcoded credentials.
		Delete existing config.py file
			- del config.py
		Create a new config.py file
			- type nul > config.py
		Open the new file in notepad
			- notepad config.py
			- paste the Python code from the Secrets Manager
			- add get_secret()

=============================================================================
   
# Retrieve credentials from Secrets Manager
credentials = get_secret()

# Extract the values; if AWS_REGION isn't in the secret, use the region from the session
AWS_ACCESS_KEY_ID = credentials.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = credentials.get("AWS_SECRET_ACCESS_KEY")
AWS_REGION = credentials.get("AWS_REGION", boto3.session.Session().region_name or "us-east-2")
==============================================================================
		
		Import new JSON package
			- import json	

I. Push Changes.
	1. Return to terminal.
			- git commit -m "Updated config.py with Secrets Manager credentials"
			- git push -u origin main - still with error!
			- config.py is still not enough for security best practices.	
			- hard-coded credentials still live in commit history			
			- rewrite the history to completely remove the commit that had the hard-coded credentials.
	
	2. Remove hard-coded credentials from Commit History.
		- Identify the commit ID, take note of the first seven digits.
		- Run the command
			- git rebase -i root
		- A rebase editor will open. 
			- Search for the AWS credentials - seven-digit ID
		- Remove commit in the rebase.
			- pick replace with d
		- Save.

	3. Resolve merge conflicts if there are any. Save.
		- Resolve by choosing which version to keep and remove markers.
		- Delete:
			entire section <<<<< HEAD ==== for hard-coded credentials.	
			===== end of file line
			>>>>> feature-branch
	
	4. Stage and commit changes.
			- git add config.py
			- git commit -m "Resolved merge conflicts"
	
	5. Continue the rebase.
			- git rebase --continue

	6. Push the changers to GitHub.
			- bash git push
	
	7. Verify the GitHub repository.
		- Head to your forked repository.
		- Check the code in config.py
			- config.py is clean of any hard-coded credentials.
			- show only code to retrieve credentials from AWS Secrets Manager.
	
	8. Check commit history on config.py
		- show there is no commit in your hard-coded credentials.


	
	

		
				



			



		

		
